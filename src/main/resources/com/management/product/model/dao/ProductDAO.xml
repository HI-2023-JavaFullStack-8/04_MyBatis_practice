<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.management.product.model.dao.ProductDAO">

    <resultMap id="productResultMap" type="com.management.product.model.dto.ProductDTO">
        <id property="productCode" column="product_code"/>
        <result property="productName" column="product_name"/>
        <result property="originCost" column="origin_cost"/>
        <result property="releaseDate" column="release_date"/>
        <result property="discountRate" column="discount_rate"/>
        <result property="salesQuantity" column="sales_quantity"/>
        <result property="stockQuantity" column="stock_quantity"/>
        <result property="categoryCode" column="category_code"/>
        <result property="productionStatus" column="production_status"/>
    </resultMap>

    <select id="selectAllProductList" resultMap="productResultMap">
        SELECT *
          FROM product_info
         WHERE production_status = 'Y'
    </select>

    <select id="selectProductByCondition" resultMap="productResultMap">
        SELECT *
        FROM product_info
        <where>
            <if test="option=='productName'">
                AND product_name LIKE CONCAT ('%', #{value}, '%')
            </if>
            <if test="option=='salesStore'">
                <if test="value=='백화점'">
                    AND discount_rate = 0
                </if>
                <if test="value=='아울렛'">
                    <![CDATA[
                    AND discount_rate > 0ㅐ
                    ]]>
                </if>
            </if>
            <if test="option=='newProduct'">
                AND release_date LIKE '202305%'
            </if>
            <if test="option=='nonProduction'">
                AND production_status = 'Y'
            </if>
        </where>
    </select>
    <!-- 5. 제품 정보를 등록하는 쿼리를 작성하세요.
            (쿼리id) insertProduct -->
    <insert id="insertProduct" parameterType="com.management.product.model.dto.ProductDTO">
        INSERT INTO product_info( product_name
                                , origin_cost
                                , release_date
                                , discount_rate
                                , sales_quantity
                                , stock_quantity
                                , category_code
                                , production_status
        )
        VALUES (
                #{productName}
               ,#{originCost}
               ,#{releaseDate}
               ,#{discountRate}
               ,#{salesQuantity}
               ,#{stockQuantity}
               ,#{categoryCode}
               ,#{productionStatus}
               )
    </insert>

    <!-- 6. 사용자가 수정을 원하는 데이터만 수정하도록 Dynamic Query를 활용한 쿼리를 작성하세요.
            (쿼리id) updateProduct -->
    <update id="updateProduct" parameterType="com.management.product.model.dto.ProductDTO">
    UPDATE product_info
    <set>
        <if test="productName != 'SKIP'">
            product_name = #{productName},
        </if>
        <if test="originCost != 'SKIP'">
            origin_cost = #{originCost},
        </if>
        <if test="releaseDate != 'SKIP'">
            release_date = #{releaseDate},
        </if>
        <if test="discountRate != 'SKIP'">
            discount_rate = #{discountRate},
        </if>
        <if test="salesQuantity != 'SKIP'">
            sales_quantity = #{salesQuantity},
        </if>
        <if test="stockQuantity != 'SKIP'">
            stock_quantity = #{stockQuantity},
        </if>
        <if test="categoryCode != 'SKIP'">
            category_code = #{categoryCode},
        </if>
        <if test="productionStatus != 'SKIP'">
            production_status = #{productionStatus}
        </if>
    </set>
        WHERE product_code = #{productCode}
    </update>


    <!-- 7. 제품 정보를 삭제하는 쿼리를 작성하세요.
            (쿼리id) deleteProduct -->
    <delete id="deleteProduct" parameterType="com.management.product.model.dto.ProductDTO">
        DELETE
        FROM
    </delete>

</mapper>
