<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 1. namesapce 설정을 알맞게 지정하세요. -->

    <mapper namespace="com.management.product.model.dao.ProductDAO">    <!-- 현재 이 xml 파일의 주소 -->



    <!-- 2. ProductDTO type의 resultMap을 설정하세요. -->
    <resultMap id="productResultMap" type="com.management.product.model.dto.ProductDTO">    <!-- class의 주소 -->
        <id property="productCode" column="PRODUCT_CODE" />
        <result property="productName" column="PRODUCT_NAME"/>
        <result property="originCost" column="ORIGIN_COST"/>
        <result property="releaseDate" column="RELEASE_DATE"/>
        <result property="discountRate" column="DISCOUNT_RATE"/>
        <result property="salesQuantity" column="SALES_QUANTITY"/>
        <result property="stockQuantity" column="STOCK_QUANTITY"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="productionStatus" column="PRODUCTION_STATUS"/>
    </resultMap>

        <select id="selectAllProductList" resultMap="productResultMap">
                SELECT  product_code
                        ,product_name
                        ,origin_cost
                        ,release_date
                        ,discount_rate
                        ,sales_quantity
                        ,stock_quantity
                        ,category_code
                        ,production_status
                  FROM product_info
                 WHERE production_status = 'Y'
        </select>


        <select id="selectProductByCondition" resultMap="productResultMap" parameterType="hashMap">
            SELECT   PRODUCT_CODE
                    ,PRODUCT_NAME
                    ,ORIGIN_COST
                    ,RELEASE_DATE
                    ,DISCOUNT_RATE
                    ,SALES_QUANTITY
                    ,STOCK_QUANTITY
                    ,CATEGORY_CODE
                    ,PRODUCTION_STATUS
              FROM  PRODUCT_INFO
             WHERE 1 = 1
            <if test="searchOption == 'productName'">
                AND PRODUCT_NAME LIKE CONCAT('%', #{searchValue}, '%')
            </if>
            <choose>
                <when test="searchValue == '백화점'">
                    AND DISCOUNT_RATE = '0'
                </when>
               <when test="searchValue == '아울렛'">
                   AND DISCOUNT_RATE >= '1'
               </when>
            </choose>
            <if test="searchOption == 'newProduct'">
                AND RELEASE_DATE LIKE CONCAT(DATE_FORMAT(NOW(), '%Y%m'), '%')
            </if>
            <if test="searchOption == 'nonProduction'">
                AND PRODUCTION_STATUS = 'N'
            </if>
            ORDER BY PRODUCT_CODE


        </select>
    <!-- 5. 제품 정보를 등록하는 쿼리를 작성하세요.
            (쿼리id) insertProduct -->
        <insert id="insertProduct" parameterType="com.management.product.model.dto.ProductDTO">
                INSERT INTO  PRODUCT_INFO (
                                           product_code
                                          ,product_name
                                          ,origin_cost
                                          ,release_date
                                          ,discount_rate
                                          ,sales_quantity
                                          ,stock_quantity
                                          ,category_code
                                          ,production_status
                                         )
                VALUES (
                        #{ productCode }
                       , #{ productName }
                       , #{ originCost }
                       , #{ releaseDate }
                       , #{ discountRate }
                       , #{ salesQuantity }
                       , #{ stockQuantity }
                       , #{ categoryCode }
                       , #{ productionStatus }
                       )
        </insert>

    <!-- 6. 사용자가 수정을 원하는 데이터만 수정하도록 Dynamic Query를 활용한 쿼리를 작성하세요.
            (쿼리id) updateProduct -->

        <update id="updateProduct" parameterType="hashMap">
                UPDATE PRODUCT_INFO
                <trim prefix="SET" prefixOverrides=",">
                    <if test="productName != null and productName != ''">
                        ,PRODUCT_NAME = #{ productName }
                    </if>
                    <if test="originCost != null and originCost gt 0">
                        ,ORIGIN_COST = #{ originCost }
                    </if>
                    <if test=" releaseDate != null and  releaseDate gt 0">
                        ,RELEASE_DATE = #{ releaseDate }
                    </if>
                    <if test="discountRate != null and discountRate != ''">
                        ,DISCOUNT_RATE = #{ discountRate }
                    </if>
                    <if test="salesQuantity != null and salesQuantity != ''">
                        ,SALES_QUANTITY = #{ salesQuantity }
                    </if>
                    <if test="stockQuantity != null and stockQuantity != ''">
                        ,STOCK_QUANTITY = #{ stockQuantity }
                    </if>
                    <if test="categoryCode != null and categoryCode != ''">
                        ,CATEGORY_CODE = #{ categoryCode }
                    </if>
                    <if test="productionStatus != null and productionStatus != ''">
                        ,PRODUCTION_STATUS = #{ productionStatus }
                    </if>
                </trim>
                WHERE PRODUCT_CODE = #{ productCode }
        </update>


    <!-- 7. 제품 정보를 삭제하는 쿼리를 작성하세요.
            (쿼리id) deleteProduct -->
    <delete id="deleteProduct" parameterType="hashMap">
        DELETE
        FROM PRODUCT_INFO
        WHERE product_code = #{ productCode }
    </delete>

</mapper>
